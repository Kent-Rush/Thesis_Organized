import pandas as pd
from numpy import *
from numpy.linalg import *
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import imageio

import Reflection_Funcs as RF

import sys
sys.path.insert(0, 'Support_Files')
sys.path.insert(0, '..')

import Controls_Funcs as CF

import pickle

"""
This file simply generates the geomery for AJISAI. Its very crude but may save you some time.
"""

def divvy(lat, threshold, CCDs):
    output = []
    for i in range(len(CCDs) - 1):
        dif = CCDs[i+1] - CCDs[i]
        if dif < threshold:
            pt1 = CCDs[i] + dif/3
            pt2 = CCDs[i] + 2*dif/3
            output.append(pt1)
            output.append(pt2)
        else:
            pt1 = CCDs[i] + dif/4
            pt2 = CCDs[i] + 2*dif/4
            pt3 = CCDs[i] + 3*dif/4
            output.append(pt1)
            output.append(pt2)
            output.append(pt3)

    return output

Ms = {}

#R0
Ms[0] = []
CCDs = [0.39552013963199784, 37.33473242392472,
0.467517895546095, 65.9418407737943,
0.5376455798780171, 93.80590734834254,
0.6068382284188374, 121.29845303523018,
0.7068870580657034, 161.05118801491915,
0.773274599233261, 187.42917103882485,
0.840597176191892, 214.17867495039116,
0.9097898247327123, 241.67122063727868,
1.003293403841937, 278.8233094033433,
1.0743561239649466, 307.05889686555224,
2.044923275118677, 332.69757825730085,
1.509147766822835, 359.81610962775176,
0.39552013963199784, 37.33473242392472+360][1::2]

threshold = 30

for i in range(len(CCDs) - 1):
    dif = CCDs[i+1] - CCDs[i]
    if dif < threshold:
        pt1 = CCDs[i] + dif/3
        pt2 = CCDs[i] + 2*dif/3
        Ms[0].append(pt1)
        Ms[0].append(pt2)
    else:
        pt1 = CCDs[i] + dif/4
        pt2 = CCDs[i] + 2*dif/4
        pt3 = CCDs[i] + 3*dif/4
        Ms[0].append(pt1)
        Ms[0].append(pt2)
        Ms[0].append(pt3)

#R1
CCDs = [1.81324218465916, 13.976291648052836,
11.910485906932735, 52.61446396475975,
12.280760080205269, 79.73673547837495,
12.349017692955002, 106.85776027760187,
12.417275305704734, 133.9787850768289,
12.513583992187236, 172.2454365058752,
12.582776640728056, 199.73798219276284,
12.349017692954988, 226.85776027760176,
12.719291866227522, 253.9800317912169,
12.513583992187222, 292.245436505875,
12.883858165459756, 319.36770801949024,
12.953050814000576, 346.860253706378,
1.81324218465916, 13.976291648052836+360][1::2]


threshold = 30
lat = 12
Ms[lat] = divvy(lat, threshold, CCDs)

#R2
CCDs = [23.256210196045828, 0.6489148390183459,
23.32353277300446, 27.398418750584653,
23.42171153106915, 66.40811195495229,
23.489969143818882, 93.52913675417926,
23.559161792359703, 121.0216824410669,
23.627419405109436, 148.14270724029393,
23.722793055800835, 186.0378377816795,
24.094002264864457, 213.53163018295527,
23.86117835288249, 241.02292915545456,
23.929435965632223, 268.1439539546818,
24.025744652114724, 306.4106053837281,
23.79198570434167, 333.5303834685668,
23.256210196045828, 0.6489148390183459+360][1::2]

threshold = 30
lat = 23.5
Ms[lat] = divvy(lat, threshold, CCDs)
#R3

CCDs = [34.73657963907617, 2.182373536409557,
34.83756350451412, 42.30662940375913,
34.940417441534265, 83.17392704642992,
35.039531235390044, 122.55514113845811,
35.13958006503691, 162.30787611814708,
35.239628894683776, 202.06061109783593,
35.34061276012174, 242.1848669651854,
35.4425316613508, 282.68064372019546,
35.540710419415475, 321.6903369245632,
34.73657963907617, 2.182373536409557+360][1::2]

threshold = 20
lat = 35
Ms[lat] = divvy(lat, threshold, CCDs)


#R4
CCDs = [46.263700871661136, 22.291876616833008,
46.34691905706834, 55.357235618630284,
46.15336664831224, 98.45241187287684,
46.56665246797502, 142.66464421888168,
46.64800058180004, 174.98696144535768,
46.7602048767311, 219.5694679646349,
46.869604064288886, 263.0374118209302,
46.95001714232283, 294.9882081597457,
47.06222143725389, 339.5707146790231,
46.263700871661136, 22.291876616833008+360
][1::2]

threshold = 38
lat = 46
Ms[lat] = divvy(lat, threshold, CCDs)


#R5
CCDs = [57.40184721515172, 7.848690430428405,
57.5841791944147, 80.29526352425398,
57.7047988114656, 128.22145803247713,
57.88619575493749, 200.29651023864199,
58.30883193251118, 248.22395146125314,
58.491163911774166, 320.6705245550785,
57.40184721515172, 7.848690430428405 + 360][1::2]

threshold = 60
lat = 58
Ms[lat] = divvy(lat, threshold, CCDs)


#R6
CCDs = [69.26090615357444, 39.84810863038058,
69.56292271409723, 159.84935534476858,
70.1669558351428, 279.8518487735445,
69.26090615357444, 39.84810863038058 + 360][1::2]

threshold = 130
lat = 70
Ms[lat] = divvy(lat, threshold, CCDs)

#R-1
CCDs = [-10.507932220294464, 25.029661413151075,
-10.436869500171454, 53.26524887535999,
-10.368611887421721, 80.38627367458702,
-10.301289310463076, 107.13577758615327,
-10.507932220294464, 145.02966141315085,
-10.438739571753644, 172.5222071000385,
-10.067530362690022, 200.01599950131424,
-9.999272749940289, 227.13702430054127,
-9.902964063457787, 265.4036757295877,
-9.834706450708069, 292.5247005288145,
-9.766448837958336, 319.64572532804164,
-9.695386117835326, 347.8813127902506,
-10.507932220294464, 25.029661413151075+360][1::2]

threshold = 30
lat = -10
Ms[lat] = divvy(lat, threshold, CCDs)

#R-2
CCDs = [-22.62412600126754, 10.861999106521637,
-22.252916792203933, 38.35579150779745,
-22.18185407208091, 66.59137897000636,
-22.113596459331177, 93.71240376923333,
-22.322109440744754, 130.86324582090958,
-22.251981756412818, 158.72731239545783,
-21.881707583140297, 185.84958390907298,
-21.812514934599477, 213.3421295959606,
-22.01915784443085, 251.2360134229582,
-21.64888367115836, 278.35828493657334,
-21.57969102261751, 305.850830623461,
-21.511433409867777, 332.9718554226878,
-22.62412600126754, 10.861999106521637+360][1::2]

threshold = 30
lat = -22.5
Ms[lat] = divvy(lat, threshold, CCDs)

#R-3
CCDs = [-33.73422127102532, 36.45081192274546,
-33.63417244137847, 76.20354690243437,
-33.836140172254375, 115.9550351677351,
-33.73422127102532, 156.4508119227453,
-33.33309091664677, 195.83327272916176,
-33.5331885759405, 236.32780276978383,
-33.13112318577083, 276.0817844638608,
-33.33122084506459, 316.57631450448275,
-33.22930194383554, 357.07209125949294,
-33.73422127102532, 36.45081192274546+360][1::2]

threshold = 0
lat = -33
Ms[lat] = divvy(lat, threshold, CCDs)

#R-4
CCDs = [-44.95745587150532, 17.08559733203151,
-45.45115476920202, 60.92256864721128,
-45.34082054585315, 104.76203339116717,
-44.95558579992317, 137.82863910735261,
-44.84431654078318, 182.03962473896922,
-45.03786894953927, 225.1348009932159,
-44.65543931098256, 257.0868440464194,
-44.54323501605148, 301.66935056569673,
-44.4338358284937, 345.1372944219919,
-44.95745587150532, 17.08559733203151+360
][1::2]

threshold = 40
lat = -45
Ms[lat] = divvy(lat, threshold, CCDs)

#R-5
CCDs = [-57.00165189656428, 31.525043375271707,
-56.579015718990604, 79.45248459788291,
-56.39668373972762, 151.89905769170844,
-56.27606412267673, 199.82525219993147,
-56.09560221499592, 271.5287835184357,
-55.97498259794503, 319.45497802665886,
-57.00165189656428, 31.525043375271707+360][1::2]

threshold = 60
lat = -57
Ms[lat] = divvy(lat, threshold, CCDs)


#R-6
CCDs = [-69.7667605165554, -0.47811496784481733,
-69.46380892024149, 119.8946526342038,
-69.1617923597187, 239.89589934859134,
-69.7667605165554, -0.47811496784481733+360][1::2]

threshold = 130
lat = -70
Ms[lat] = divvy(lat, threshold, CCDs)

# plt.scatter(zeros(len(CCDs)), CCDs, c = 'b', s = 10)
# plt.scatter(zeros(len(Ms[lat])), Ms[lat], c = 'r', s = 10)

# plt.figure()
# plt.plot(diff(CCDs))


outfile = open('AJISAI_coords', 'wb')
pickle.dump(Ms, outfile)
outfile.close()
print('File saved')

# fig = plt.figure()
# ax = Axes3D(fig)
Radius = 1.075
facets = []
for lat in Ms.keys():
    for lon in Ms[lat]:
        rlat = lat/180*pi
        rlon = lon/180*pi
        
        facet2body = CF.Cz(rlon).T@CF.Cy(pi/2 - rlat)
        position  =  CF.Cz(rlon)@CF.Cy(rlat)@array([1,0,0])
        facet = RF.Facet(15/100, 15/100, position, facet2body = facet2body)
        facets.append(facet)

AJISAI = RF.Spacecraft_Geometry(facets, sample_dim = 1)
for facet in AJISAI.facets:
    AJISAI.obscuring_facets[facet] = []

image = RF.generate_image(AJISAI, array([1,0,0]), array([1,1,1]), .01, win_dim = (3,3), dpm = 100, load_bar = True)
imageio.imwrite('AJISAI.png',image)
plt.figure()
plt.imshow(image, cmap = 'Greys')
plt.show()

